---
import Close from "@/icons/Close.astro"
import LogoCaawards from "@/icons/LogoCaawards.astro"
import SearchIcon from "@/icons/SearchIcon.astro"
---

<section class="flex flex-1 flex-col items-center justify-center my-20 md:my-0">
  <div class="flex gap-3">
    <h2 id="category-title" class="font-bold text-center font-Inter mb-16 text-3xl uppercase">
      Streamers del a√±o
    </h2>
    <SearchIcon 
      id="search-icon" 
      strokeFill="#03e907" 
      class:list={'w-7 cursor-pointer hover:scale-110 transition-transform duration-200'} 
    />
  </div>
  <ol class="flex flex-col md:flex-row items-center justify-center relative w-full">
    <div class="line bg-primary"></div>
  </ol>

  <div id="modal-overlay" class="modal-hidden fixed inset-0 bg-black/75 flex items-center justify-center z-50">
    <div class="modal-content bg-white p-8 rounded-lg text-center">
      <div class="flex gap-32">
        <div class="flex items-center justify-center gap-5">
          <LogoCaawards class:list={'w-16 h-auto'}/>
          <p class="text-xl font-bold text-black font-Inter">SELECCIONA LA TERNA</p>
        </div>
        <Close strokeFill="black" id="close-modal" class:list={'w-11 cursor-pointer hover:scale-90 transition-transform duration-200'}/>
      </div>
      
    </div>
  </div>
</section>

<style>
   .modal-hidden {
    display: none;
  }

  .modal-visible {
    display: flex;
  }

  .modal-content {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .line {
    position: absolute; 
    top: 50%;
    transform: translateY(-50%);
    height: 4px;
    z-index: 0;
    display: none;
  }

  .dot {
    width: 12px;
    height: 12px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
    border-radius: 50%;
  }

  ol {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 2rem;
    width: 100%;
    position: relative;
  }

  li {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
  }
</style>

<script>
  import { picantes, type PicanteCategory } from "@/data/spicies";
  import { allCategories } from "@/data/categories";

  const getQueryParam = (param: string): string | null => {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
  };

  const detectLanguageFromPath = () => {
    const path = window.location.pathname;
    const segments = path.split("/").filter(Boolean);
    const lang = segments[0];
    return lang === "es" || lang === "en" ? lang : "es";
  };

  const renderData = () => {
    const lang = detectLanguageFromPath();
    const category = getQueryParam("category") as PicanteCategory || 'streamers-of-the-year';

    const categoryData = allCategories.find(cat => cat.id === category);
    const categoryTitle = lang === "es" ? categoryData?.title : categoryData?.enTitle;

    const titleElement = document.getElementById("category-title");
    if (titleElement && categoryTitle) {
      titleElement.textContent = categoryTitle;
    }

    if (!(category in picantes)) {
      console.error(`Invalid Category: ${category}`);
      return;
    }

    const container = document.querySelector("ol");
    if (!container) return;

    const listItems = container.querySelectorAll("li");
    listItems.forEach(item => item.remove());

    picantes[category].forEach((picante) => {
      const listItem = document.createElement("li");
      listItem.className = "flex flex-row md:flex-col items-center relative";

      listItem.innerHTML = `
        <a href="${picante.channel}" target="_blank" rel="noopener noreferrer">
          <img 
            src="${picante.image}" 
            alt="image" 
            class="rounded-full w-20 h-20 aspect-square object-cover mb-4 hover:scale-110 hover:grayscale-0 transition-all duration-300 grayscale"
          />
        </a>
        <div class="dot w-3 h-3 bg-primary rounded-full"></div>
        <div class="flex flex-col items-center mt-4">
          <h3 class="font-bold font-Inter text-2xl">${picante.year}</h3>
          <h4 class="font-normal text-2xl font-Inter text-primary">${picante.nickname}</h4>
          <h5 class="font-extralight font-Inter">${picante.name}</h5>
        </div>
      `;

      container.appendChild(listItem);
    });

    setTimeout(adjustLinePosition, 100);
  };

  const adjustLinePosition = () => {
    const items = document.querySelectorAll("ol > li");
    const line = document.querySelector(".line") as HTMLElement;

    if (!line || items.length < 2) {
      if (line) line.style.display = "none";
      return;
    }

    const container = document.querySelector("ol");
    if (!container) return;

    const containerRect = container.getBoundingClientRect();

    const dots = [...items].map(item => item.querySelector(".dot"));
    if (!dots.length || dots.some(dot => dot === null)) return;

    const firstDotRect = (dots[0] as HTMLElement).getBoundingClientRect();
    const lastDotRect = (dots[dots.length - 1] as HTMLElement).getBoundingClientRect();

    const startX = firstDotRect.left - containerRect.left + firstDotRect.width / 2;
    const endX = lastDotRect.left - containerRect.left + lastDotRect.width / 2;

    const lineWidth = endX - startX;

    const topPosition = firstDotRect.top - containerRect.top + firstDotRect.height / 2;

    line.style.left = `${startX}px`;
    line.style.width = `${lineWidth}px`;
    line.style.top = `${topPosition}px`;
    line.style.display = "block";
  };

  const generateModal = () => {
    const searchIcon = document.getElementById("search-icon");
    const modalOverlay = document.getElementById("modal-overlay");
    const closeModal = document.getElementById("close-modal");

    if (!searchIcon || !modalOverlay || !closeModal) {
      console.error("One of the modal's elements was not found in the DOM");
      return;
    }

    searchIcon.addEventListener("click", () => {
      modalOverlay.classList.remove("modal-hidden");
      modalOverlay.classList.add("modal-visible");
    });

    closeModal.addEventListener("click", () => {
      modalOverlay.classList.remove("modal-visible");
      modalOverlay.classList.add("modal-hidden");
    });

    modalOverlay.addEventListener("click", (event) => {
      if (event.target === modalOverlay) {
        modalOverlay.classList.remove("modal-visible");
        modalOverlay.classList.add("modal-hidden");
      }
    });
  };

  document.addEventListener("astro:page-load", renderData);
  document.addEventListener("astro:page-load", generateModal);
  window.addEventListener("resize", adjustLinePosition);
</script>